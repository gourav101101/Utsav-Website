# Example backend .env for Utsav backend
# Copy this file to .env and update values before running the server.

# -----------------------------
# MongoDB Atlas connection
# -----------------------------
# Replace <db_username> and <db_password> with the DB user you created in Atlas.
# Example (based on the cluster/username you mentioned):
#   mongodb+srv://gourav:123@cluster0.9goq9a5.mongodb.net/utsav?retryWrites=true&w=majority
# IMPORTANT: do NOT commit your real username/password. Use a stronger password than '123'.
# If you want a specific default database name, include it in the path (above uses 'utsav').
MONGODB_URI=mongodb+srv://gourav:123@cluster0.9goq9a5.mongodb.net/utsav?retryWrites=true&w=majority
# Port the backend will listen on (when running locally)
PORT=4000

# -----------------------------
# Admin authorization
# -----------------------------
# A shared static API key used to authorize admin actions (create/update/delete).
# WARNING: using a static key is simple but not recommended for production â€” consider
# proper auth (OAuth/JWT) later. Do NOT commit this secret to source control.
# Set ADMIN_API_KEY on the server (Render environment variables, or in .env locally).
ADMIN_API_KEY=your_backend_admin_key_here

# For development convenience the server also accepts VITE_ADMIN_KEY as a fallback
# (so local frontend builds can use the same env var). Prefer setting ADMIN_API_KEY.
VITE_ADMIN_KEY=

# Optional: the frontend origin allowed by CORS (set this when deploying)
# Example: https://your-frontend-domain.com  OR http://localhost:5173 (Vite dev)
FRONTEND_URL=https://utsavdecorandevents.firebaseapp.com/

# Optional debug: set to 1 to enable masked admin auth debug logs in the server
DEBUG_ADMIN_AUTH=0

# -----------------------------
# Quick local seed & run examples (bash)
# -----------------------------
# 1) Run the seed script to insert demo data into your Atlas DB (replace URI and admin key):
#
#   export MONGODB_URI="mongodb+srv://gourav:123@cluster0.9goq9a5.mongodb.net/utsav?retryWrites=true&w=majority"
#   export ADMIN_API_KEY="replace_with_a_strong_key"
#   cd backend
#   npm install
#   npm run seed
#
# 2) Start the backend locally (development):
#
#   export MONGODB_URI="<your-uri>"
#   export ADMIN_API_KEY="<your_admin_key>"
#   npm run dev
#
# 3) Test admin-protected endpoint (create a category) using curl:
#
#   curl -X POST http://localhost:4000/api/categories \
#     -H "Content-Type: application/json" \
#     -H "x-admin-key: <your_admin_key>" \
#     -d '{"name":"Test Category"}'
#
# -----------------------------
# Deploying to Render (brief notes)
# -----------------------------
# - In Render, create a new Web Service and set the Root Directory to: "backend"
# - Start Command: npm start
# - Add Environment Variables in the Render dashboard:
#     MONGODB_URI  (your Atlas connection string)
#     ADMIN_API_KEY (a strong secret for admin actions)
#     FRONTEND_URL  (your deployed frontend URL for CORS)
# - For quick testing you can allow Atlas network access from anywhere, but in
#   production you should restrict access. For testing: set IP Access to 0.0.0.0/0

# -----------------------------
# Security notes / next steps
# -----------------------------
# - Use a stronger DB user password than '123' and create a dedicated DB user
#   with the minimum required roles (typically readWrite on the app DB).
# - Don't store secrets in source control. Use Render's environment variables or
#   a secrets manager for production.
# - After deploying, set DEBUG_ADMIN_AUTH=1 temporarily if you need masked auth logs.

